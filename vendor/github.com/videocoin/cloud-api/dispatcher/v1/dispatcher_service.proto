syntax = "proto3";

package cloud.api.dispatcher.v1;

import "github.com/videocoin/cloud-api/rpc/health.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "dispatcher/v1/task.proto";
import "github.com/videocoin/cloud-api/validator/v1/validator_service.proto";
import "github.com/videocoin/cloud-api/syncer/v1/syncer_service.proto";
import "github.com/videocoin/cloud-api/miners/v1/miner_service.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service DispatcherService {
    rpc Health(google.protobuf.Empty) returns (cloud.api.rpc.HealthStatus) {
      option (google.api.http) = {
        get: "/healthz"
      };
    }

    rpc GetPendingTask(TaskPendingRequest) returns (cloud.api.dispatcher.v1.Task) {}
    rpc GetTask(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
    rpc MarkTaskAsCompleted(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
    rpc MarkTaskAsFailed(TaskRequest) returns (cloud.api.dispatcher.v1.Task) {}
    rpc ValidateProof(cloud.api.validator.v1.ValidateProofRequest) returns (google.protobuf.Empty) {}
    rpc Sync(cloud.api.syncer.v1.SyncRequest) returns (google.protobuf.Empty) {}
    rpc Ping(cloud.api.miners.v1.PingRequest) returns (cloud.api.miners.v1.PingResponse) {}
    rpc Register(RegistrationRequest) returns (google.protobuf.Empty) {}
}

message TaskPendingRequest {
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
}

message TaskRequest {
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
  string id = 2 [(gogoproto.customname) = "ID"];
}

message RegistrationRequest {
  string client_id = 1 [(gogoproto.customname) = "ClientID"];
}
