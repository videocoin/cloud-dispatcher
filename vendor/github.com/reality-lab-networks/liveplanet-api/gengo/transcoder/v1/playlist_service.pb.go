// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transcoder/v1/playlist_service.proto

package v1 // import "github.com/reality-lab-networks/liveplanet-api/gengo/transcoder/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/mwitkow/go-proto-validators"
import rpc "github.com/reality-lab-networks/liveplanet-api/gengo/rpc"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreatePlaylistRequest struct {
	Kind                 string             `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	ProjectionType       string             `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	StereoFormat         string             `protobuf:"bytes,3,opt,name=stereo_format,json=stereoFormat,proto3" json:"stereo_format,omitempty"`
	CubemapFaceOrder     string             `protobuf:"bytes,4,opt,name=cubemap_face_order,json=cubemapFaceOrder,proto3" json:"cubemap_face_order,omitempty"`
	Smoothstep           bool               `protobuf:"varint,5,opt,name=smoothstep,proto3" json:"smoothstep,omitempty"`
	Variants             []*PlaylistVariant `protobuf:"bytes,6,rep,name=variants,proto3" json:"variants,omitempty"`
	Metadata             *Metadata          `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IsLive               bool               `protobuf:"varint,8,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	BottomCap            bool               `protobuf:"varint,14,opt,name=bottom_cap,json=bottomCap,proto3" json:"bottom_cap,omitempty"`
	MpVersion            uint32             `protobuf:"varint,15,opt,name=mp_version,json=mpVersion,proto3" json:"mp_version,omitempty"`
	SmartSampling        bool               `protobuf:"varint,16,opt,name=smart_sampling,json=smartSampling,proto3" json:"smart_sampling,omitempty"`
	CuboidWidth          uint32             `protobuf:"varint,17,opt,name=cuboid_width,json=cuboidWidth,proto3" json:"cuboid_width,omitempty"`
	CuboidHeight         uint32             `protobuf:"varint,18,opt,name=cuboid_height,json=cuboidHeight,proto3" json:"cuboid_height,omitempty"`
	CuboidTbLength       uint32             `protobuf:"varint,19,opt,name=cuboid_tb_length,json=cuboidTbLength,proto3" json:"cuboid_tb_length,omitempty"`
	Gop                  uint32             `protobuf:"varint,20,opt,name=gop,proto3" json:"gop,omitempty"`
	FrameRate            float64            `protobuf:"fixed64,21,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreatePlaylistRequest) Reset()         { *m = CreatePlaylistRequest{} }
func (m *CreatePlaylistRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePlaylistRequest) ProtoMessage()    {}
func (*CreatePlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{0}
}
func (m *CreatePlaylistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePlaylistRequest.Unmarshal(m, b)
}
func (m *CreatePlaylistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePlaylistRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePlaylistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePlaylistRequest.Merge(dst, src)
}
func (m *CreatePlaylistRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePlaylistRequest.Size(m)
}
func (m *CreatePlaylistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePlaylistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePlaylistRequest proto.InternalMessageInfo

func (m *CreatePlaylistRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *CreatePlaylistRequest) GetProjectionType() string {
	if m != nil {
		return m.ProjectionType
	}
	return ""
}

func (m *CreatePlaylistRequest) GetStereoFormat() string {
	if m != nil {
		return m.StereoFormat
	}
	return ""
}

func (m *CreatePlaylistRequest) GetCubemapFaceOrder() string {
	if m != nil {
		return m.CubemapFaceOrder
	}
	return ""
}

func (m *CreatePlaylistRequest) GetSmoothstep() bool {
	if m != nil {
		return m.Smoothstep
	}
	return false
}

func (m *CreatePlaylistRequest) GetVariants() []*PlaylistVariant {
	if m != nil {
		return m.Variants
	}
	return nil
}

func (m *CreatePlaylistRequest) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreatePlaylistRequest) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *CreatePlaylistRequest) GetBottomCap() bool {
	if m != nil {
		return m.BottomCap
	}
	return false
}

func (m *CreatePlaylistRequest) GetMpVersion() uint32 {
	if m != nil {
		return m.MpVersion
	}
	return 0
}

func (m *CreatePlaylistRequest) GetSmartSampling() bool {
	if m != nil {
		return m.SmartSampling
	}
	return false
}

func (m *CreatePlaylistRequest) GetCuboidWidth() uint32 {
	if m != nil {
		return m.CuboidWidth
	}
	return 0
}

func (m *CreatePlaylistRequest) GetCuboidHeight() uint32 {
	if m != nil {
		return m.CuboidHeight
	}
	return 0
}

func (m *CreatePlaylistRequest) GetCuboidTbLength() uint32 {
	if m != nil {
		return m.CuboidTbLength
	}
	return 0
}

func (m *CreatePlaylistRequest) GetGop() uint32 {
	if m != nil {
		return m.Gop
	}
	return 0
}

func (m *CreatePlaylistRequest) GetFrameRate() float64 {
	if m != nil {
		return m.FrameRate
	}
	return 0
}

type PlaylistResponse struct {
	Kind                 string             `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	ProjectionType       string             `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	StereoFormat         string             `protobuf:"bytes,3,opt,name=stereo_format,json=stereoFormat,proto3" json:"stereo_format,omitempty"`
	CubemapFaceOrder     string             `protobuf:"bytes,4,opt,name=cubemap_face_order,json=cubemapFaceOrder,proto3" json:"cubemap_face_order,omitempty"`
	Smoothstep           bool               `protobuf:"varint,5,opt,name=smoothstep,proto3" json:"smoothstep,omitempty"`
	Variants             []*PlaylistVariant `protobuf:"bytes,6,rep,name=variants,proto3" json:"variants,omitempty"`
	Metadata             *Metadata          `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Bucket               string             `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	ObjectName           string             `protobuf:"bytes,9,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Url                  string             `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	IsLive               bool               `protobuf:"varint,11,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	CdnHost              string             `protobuf:"bytes,12,opt,name=cdn_host,json=cdnHost,proto3" json:"cdn_host,omitempty"`
	CdnUrl               string             `protobuf:"bytes,13,opt,name=cdn_url,json=cdnUrl,proto3" json:"cdn_url,omitempty"`
	BottomCap            bool               `protobuf:"varint,14,opt,name=bottom_cap,json=bottomCap,proto3" json:"bottom_cap,omitempty"`
	MpVersion            uint32             `protobuf:"varint,15,opt,name=mp_version,json=mpVersion,proto3" json:"mp_version,omitempty"`
	SmartSampling        bool               `protobuf:"varint,16,opt,name=smart_sampling,json=smartSampling,proto3" json:"smart_sampling,omitempty"`
	CuboidWidth          uint32             `protobuf:"varint,17,opt,name=cuboid_width,json=cuboidWidth,proto3" json:"cuboid_width,omitempty"`
	CuboidHeight         uint32             `protobuf:"varint,18,opt,name=cuboid_height,json=cuboidHeight,proto3" json:"cuboid_height,omitempty"`
	CuboidTbLength       uint32             `protobuf:"varint,19,opt,name=cuboid_tb_length,json=cuboidTbLength,proto3" json:"cuboid_tb_length,omitempty"`
	Gop                  uint32             `protobuf:"varint,20,opt,name=gop,proto3" json:"gop,omitempty"`
	FrameRate            float64            `protobuf:"fixed64,21,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PlaylistResponse) Reset()         { *m = PlaylistResponse{} }
func (m *PlaylistResponse) String() string { return proto.CompactTextString(m) }
func (*PlaylistResponse) ProtoMessage()    {}
func (*PlaylistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{1}
}
func (m *PlaylistResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistResponse.Unmarshal(m, b)
}
func (m *PlaylistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistResponse.Marshal(b, m, deterministic)
}
func (dst *PlaylistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistResponse.Merge(dst, src)
}
func (m *PlaylistResponse) XXX_Size() int {
	return xxx_messageInfo_PlaylistResponse.Size(m)
}
func (m *PlaylistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistResponse proto.InternalMessageInfo

func (m *PlaylistResponse) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *PlaylistResponse) GetProjectionType() string {
	if m != nil {
		return m.ProjectionType
	}
	return ""
}

func (m *PlaylistResponse) GetStereoFormat() string {
	if m != nil {
		return m.StereoFormat
	}
	return ""
}

func (m *PlaylistResponse) GetCubemapFaceOrder() string {
	if m != nil {
		return m.CubemapFaceOrder
	}
	return ""
}

func (m *PlaylistResponse) GetSmoothstep() bool {
	if m != nil {
		return m.Smoothstep
	}
	return false
}

func (m *PlaylistResponse) GetVariants() []*PlaylistVariant {
	if m != nil {
		return m.Variants
	}
	return nil
}

func (m *PlaylistResponse) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PlaylistResponse) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *PlaylistResponse) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *PlaylistResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PlaylistResponse) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *PlaylistResponse) GetCdnHost() string {
	if m != nil {
		return m.CdnHost
	}
	return ""
}

func (m *PlaylistResponse) GetCdnUrl() string {
	if m != nil {
		return m.CdnUrl
	}
	return ""
}

func (m *PlaylistResponse) GetBottomCap() bool {
	if m != nil {
		return m.BottomCap
	}
	return false
}

func (m *PlaylistResponse) GetMpVersion() uint32 {
	if m != nil {
		return m.MpVersion
	}
	return 0
}

func (m *PlaylistResponse) GetSmartSampling() bool {
	if m != nil {
		return m.SmartSampling
	}
	return false
}

func (m *PlaylistResponse) GetCuboidWidth() uint32 {
	if m != nil {
		return m.CuboidWidth
	}
	return 0
}

func (m *PlaylistResponse) GetCuboidHeight() uint32 {
	if m != nil {
		return m.CuboidHeight
	}
	return 0
}

func (m *PlaylistResponse) GetCuboidTbLength() uint32 {
	if m != nil {
		return m.CuboidTbLength
	}
	return 0
}

func (m *PlaylistResponse) GetGop() uint32 {
	if m != nil {
		return m.Gop
	}
	return 0
}

func (m *PlaylistResponse) GetFrameRate() float64 {
	if m != nil {
		return m.FrameRate
	}
	return 0
}

type PlaylistRequest struct {
	BroadcastId          string   `protobuf:"bytes,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistRequest) Reset()         { *m = PlaylistRequest{} }
func (m *PlaylistRequest) String() string { return proto.CompactTextString(m) }
func (*PlaylistRequest) ProtoMessage()    {}
func (*PlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{2}
}
func (m *PlaylistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistRequest.Unmarshal(m, b)
}
func (m *PlaylistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistRequest.Marshal(b, m, deterministic)
}
func (dst *PlaylistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistRequest.Merge(dst, src)
}
func (m *PlaylistRequest) XXX_Size() int {
	return xxx_messageInfo_PlaylistRequest.Size(m)
}
func (m *PlaylistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistRequest proto.InternalMessageInfo

func (m *PlaylistRequest) GetBroadcastId() string {
	if m != nil {
		return m.BroadcastId
	}
	return ""
}

type PlaylistManifest struct {
	MasterPlaylist       string                     `protobuf:"bytes,1,opt,name=master_playlist,json=masterPlaylist,proto3" json:"master_playlist,omitempty"`
	Qualities            []*PlaylistManifestQuality `protobuf:"bytes,2,rep,name=qualities,proto3" json:"qualities,omitempty"`
	BottomCap            bool                       `protobuf:"varint,3,opt,name=bottom_cap,json=bottomCap,proto3" json:"bottom_cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PlaylistManifest) Reset()         { *m = PlaylistManifest{} }
func (m *PlaylistManifest) String() string { return proto.CompactTextString(m) }
func (*PlaylistManifest) ProtoMessage()    {}
func (*PlaylistManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{3}
}
func (m *PlaylistManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistManifest.Unmarshal(m, b)
}
func (m *PlaylistManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistManifest.Marshal(b, m, deterministic)
}
func (dst *PlaylistManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistManifest.Merge(dst, src)
}
func (m *PlaylistManifest) XXX_Size() int {
	return xxx_messageInfo_PlaylistManifest.Size(m)
}
func (m *PlaylistManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistManifest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistManifest proto.InternalMessageInfo

func (m *PlaylistManifest) GetMasterPlaylist() string {
	if m != nil {
		return m.MasterPlaylist
	}
	return ""
}

func (m *PlaylistManifest) GetQualities() []*PlaylistManifestQuality {
	if m != nil {
		return m.Qualities
	}
	return nil
}

func (m *PlaylistManifest) GetBottomCap() bool {
	if m != nil {
		return m.BottomCap
	}
	return false
}

type PlaylistManifestQuality struct {
	Bitrate              uint32   `protobuf:"varint,1,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	NumViewports         uint32   `protobuf:"varint,2,opt,name=num_viewports,json=numViewports,proto3" json:"num_viewports,omitempty"`
	CubemapFaceOrder     string   `protobuf:"bytes,3,opt,name=cubemap_face_order,json=cubemapFaceOrder,proto3" json:"cubemap_face_order,omitempty"`
	ProjectionType       string   `protobuf:"bytes,4,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	Smoothstep           bool     `protobuf:"varint,5,opt,name=smoothstep,proto3" json:"smoothstep,omitempty"`
	OffsetZ              float32  `protobuf:"fixed32,6,opt,name=offset_z,json=offsetZ,proto3" json:"offset_z,omitempty"`
	StereoType           string   `protobuf:"bytes,7,opt,name=stereo_type,json=stereoType,proto3" json:"stereo_type,omitempty"`
	Padding              float32  `protobuf:"fixed32,8,opt,name=padding,proto3" json:"padding,omitempty"`
	ExpandCoef           float32  `protobuf:"fixed32,9,opt,name=expand_coef,json=expandCoef,proto3" json:"expand_coef,omitempty"`
	EquiangularCube      bool     `protobuf:"varint,10,opt,name=equiangular_cube,json=equiangularCube,proto3" json:"equiangular_cube,omitempty"`
	SmartSampling        bool     `protobuf:"varint,11,opt,name=smart_sampling,json=smartSampling,proto3" json:"smart_sampling,omitempty"`
	CuboidWidth          uint32   `protobuf:"varint,12,opt,name=cuboid_width,json=cuboidWidth,proto3" json:"cuboid_width,omitempty"`
	CuboidHeight         uint32   `protobuf:"varint,13,opt,name=cuboid_height,json=cuboidHeight,proto3" json:"cuboid_height,omitempty"`
	CuboidTbLength       uint32   `protobuf:"varint,14,opt,name=cuboid_tb_length,json=cuboidTbLength,proto3" json:"cuboid_tb_length,omitempty"`
	HorizontalFov        uint32   `protobuf:"varint,15,opt,name=horizontal_fov,json=horizontalFov,proto3" json:"horizontal_fov,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistManifestQuality) Reset()         { *m = PlaylistManifestQuality{} }
func (m *PlaylistManifestQuality) String() string { return proto.CompactTextString(m) }
func (*PlaylistManifestQuality) ProtoMessage()    {}
func (*PlaylistManifestQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{4}
}
func (m *PlaylistManifestQuality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistManifestQuality.Unmarshal(m, b)
}
func (m *PlaylistManifestQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistManifestQuality.Marshal(b, m, deterministic)
}
func (dst *PlaylistManifestQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistManifestQuality.Merge(dst, src)
}
func (m *PlaylistManifestQuality) XXX_Size() int {
	return xxx_messageInfo_PlaylistManifestQuality.Size(m)
}
func (m *PlaylistManifestQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistManifestQuality.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistManifestQuality proto.InternalMessageInfo

func (m *PlaylistManifestQuality) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *PlaylistManifestQuality) GetNumViewports() uint32 {
	if m != nil {
		return m.NumViewports
	}
	return 0
}

func (m *PlaylistManifestQuality) GetCubemapFaceOrder() string {
	if m != nil {
		return m.CubemapFaceOrder
	}
	return ""
}

func (m *PlaylistManifestQuality) GetProjectionType() string {
	if m != nil {
		return m.ProjectionType
	}
	return ""
}

func (m *PlaylistManifestQuality) GetSmoothstep() bool {
	if m != nil {
		return m.Smoothstep
	}
	return false
}

func (m *PlaylistManifestQuality) GetOffsetZ() float32 {
	if m != nil {
		return m.OffsetZ
	}
	return 0
}

func (m *PlaylistManifestQuality) GetStereoType() string {
	if m != nil {
		return m.StereoType
	}
	return ""
}

func (m *PlaylistManifestQuality) GetPadding() float32 {
	if m != nil {
		return m.Padding
	}
	return 0
}

func (m *PlaylistManifestQuality) GetExpandCoef() float32 {
	if m != nil {
		return m.ExpandCoef
	}
	return 0
}

func (m *PlaylistManifestQuality) GetEquiangularCube() bool {
	if m != nil {
		return m.EquiangularCube
	}
	return false
}

func (m *PlaylistManifestQuality) GetSmartSampling() bool {
	if m != nil {
		return m.SmartSampling
	}
	return false
}

func (m *PlaylistManifestQuality) GetCuboidWidth() uint32 {
	if m != nil {
		return m.CuboidWidth
	}
	return 0
}

func (m *PlaylistManifestQuality) GetCuboidHeight() uint32 {
	if m != nil {
		return m.CuboidHeight
	}
	return 0
}

func (m *PlaylistManifestQuality) GetCuboidTbLength() uint32 {
	if m != nil {
		return m.CuboidTbLength
	}
	return 0
}

func (m *PlaylistManifestQuality) GetHorizontalFov() uint32 {
	if m != nil {
		return m.HorizontalFov
	}
	return 0
}

type AddSegmentRequest struct {
	BroadcastId          string   `protobuf:"bytes,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	VariantId            string   `protobuf:"bytes,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	Num                  uint64   `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Duration             float64  `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`
	IsLast               bool     `protobuf:"varint,6,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSegmentRequest) Reset()         { *m = AddSegmentRequest{} }
func (m *AddSegmentRequest) String() string { return proto.CompactTextString(m) }
func (*AddSegmentRequest) ProtoMessage()    {}
func (*AddSegmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_playlist_service_ac7a16c2e7abc611, []int{5}
}
func (m *AddSegmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSegmentRequest.Unmarshal(m, b)
}
func (m *AddSegmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSegmentRequest.Marshal(b, m, deterministic)
}
func (dst *AddSegmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSegmentRequest.Merge(dst, src)
}
func (m *AddSegmentRequest) XXX_Size() int {
	return xxx_messageInfo_AddSegmentRequest.Size(m)
}
func (m *AddSegmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSegmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddSegmentRequest proto.InternalMessageInfo

func (m *AddSegmentRequest) GetBroadcastId() string {
	if m != nil {
		return m.BroadcastId
	}
	return ""
}

func (m *AddSegmentRequest) GetVariantId() string {
	if m != nil {
		return m.VariantId
	}
	return ""
}

func (m *AddSegmentRequest) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *AddSegmentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddSegmentRequest) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AddSegmentRequest) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

func init() {
	proto.RegisterType((*CreatePlaylistRequest)(nil), "liveplanet.api.transcoder.v1.CreatePlaylistRequest")
	proto.RegisterType((*PlaylistResponse)(nil), "liveplanet.api.transcoder.v1.PlaylistResponse")
	proto.RegisterType((*PlaylistRequest)(nil), "liveplanet.api.transcoder.v1.PlaylistRequest")
	proto.RegisterType((*PlaylistManifest)(nil), "liveplanet.api.transcoder.v1.PlaylistManifest")
	proto.RegisterType((*PlaylistManifestQuality)(nil), "liveplanet.api.transcoder.v1.PlaylistManifestQuality")
	proto.RegisterType((*AddSegmentRequest)(nil), "liveplanet.api.transcoder.v1.AddSegmentRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error)
	Create(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	Get(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error)
	Cancel(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Complete(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetManifest(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistManifest, error)
}

type playlistServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlaylistServiceClient(cc *grpc.ClientConn) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*rpc.HealthStatus, error) {
	out := new(rpc.HealthStatus)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Create(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Get(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistResponse, error) {
	out := new(PlaylistResponse)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Cancel(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Complete(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetManifest(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistManifest, error) {
	out := new(PlaylistManifest)
	err := c.cc.Invoke(ctx, "/liveplanet.api.transcoder.v1.PlaylistService/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
type PlaylistServiceServer interface {
	Health(context.Context, *empty.Empty) (*rpc.HealthStatus, error)
	Create(context.Context, *CreatePlaylistRequest) (*PlaylistResponse, error)
	Get(context.Context, *PlaylistRequest) (*PlaylistResponse, error)
	Cancel(context.Context, *PlaylistRequest) (*empty.Empty, error)
	Complete(context.Context, *PlaylistRequest) (*empty.Empty, error)
	GetManifest(context.Context, *PlaylistRequest) (*PlaylistManifest, error)
}

func RegisterPlaylistServiceServer(s *grpc.Server, srv PlaylistServiceServer) {
	s.RegisterService(&_PlaylistService_serviceDesc, srv)
}

func _PlaylistService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Create(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Get(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Cancel(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Complete(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveplanet.api.transcoder.v1.PlaylistService/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetManifest(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlaylistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liveplanet.api.transcoder.v1.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PlaylistService_Health_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PlaylistService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PlaylistService_Get_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _PlaylistService_Cancel_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _PlaylistService_Complete_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _PlaylistService_GetManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transcoder/v1/playlist_service.proto",
}

func init() {
	proto.RegisterFile("transcoder/v1/playlist_service.proto", fileDescriptor_playlist_service_ac7a16c2e7abc611)
}

var fileDescriptor_playlist_service_ac7a16c2e7abc611 = []byte{
	// 1416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcd, 0x72, 0x1b, 0xc5,
	0x16, 0xf6, 0x58, 0x8e, 0x7e, 0x5a, 0x96, 0xac, 0xf4, 0xbd, 0x71, 0x26, 0x4e, 0xae, 0xa5, 0x28,
	0x37, 0x89, 0x42, 0x45, 0x23, 0xcb, 0x09, 0xa9, 0x00, 0x1b, 0xb0, 0x2b, 0xbf, 0x95, 0x04, 0x18,
	0x87, 0xa4, 0x2a, 0x9b, 0xa9, 0x9e, 0x99, 0xd6, 0x68, 0xe2, 0x99, 0xee, 0x49, 0x77, 0x8f, 0x8c,
	0x83, 0xd8, 0xc0, 0x82, 0x05, 0x55, 0x6c, 0xd8, 0xf0, 0x00, 0xec, 0x29, 0x1e, 0x80, 0x3d, 0x4b,
	0xaa, 0x78, 0x00, 0x53, 0x82, 0x17, 0xe0, 0x05, 0x28, 0xaa, 0x7b, 0x66, 0x2c, 0xd9, 0x91, 0x63,
	0x27, 0x05, 0x0b, 0xaa, 0xf0, 0xc6, 0xdd, 0xdf, 0x39, 0xdf, 0xe9, 0x33, 0xdd, 0xdf, 0xe9, 0x3e,
	0x02, 0xff, 0x17, 0x0c, 0x11, 0xee, 0x50, 0x17, 0xb3, 0xce, 0xa0, 0xdb, 0x89, 0x02, 0xb4, 0x1d,
	0xf8, 0x5c, 0x58, 0x1c, 0xb3, 0x81, 0xef, 0x60, 0x23, 0x62, 0x54, 0x50, 0x78, 0x26, 0xf0, 0x07,
	0x38, 0x0a, 0x10, 0xc1, 0xc2, 0x40, 0x91, 0x6f, 0x8c, 0x49, 0xc6, 0xa0, 0xbb, 0x74, 0xda, 0xa3,
	0xd4, 0x0b, 0x70, 0x47, 0xf9, 0xda, 0x71, 0xaf, 0x83, 0xc3, 0x48, 0x6c, 0x27, 0xd4, 0xa5, 0x33,
	0xa9, 0x11, 0x45, 0x7e, 0x07, 0x11, 0x42, 0x05, 0x12, 0x3e, 0x25, 0x3c, 0xb5, 0xb6, 0x3d, 0x5f,
	0xf4, 0x63, 0xdb, 0x70, 0x68, 0xd8, 0xf1, 0xa8, 0x47, 0xc7, 0x31, 0xe4, 0x4c, 0x4d, 0xd4, 0x28,
	0x75, 0xbf, 0x36, 0xe1, 0x1e, 0x6e, 0xf9, 0x62, 0x93, 0x6e, 0x75, 0x3c, 0xda, 0x56, 0xc6, 0xf6,
	0x00, 0x05, 0xbe, 0x8b, 0x04, 0x65, 0xbc, 0xb3, 0x3b, 0x4c, 0x79, 0x35, 0x16, 0x39, 0x9d, 0x3e,
	0x46, 0x81, 0xe8, 0x67, 0x69, 0xed, 0xfd, 0xee, 0x10, 0x0b, 0xe4, 0x22, 0x81, 0xa6, 0x5b, 0xb3,
	0x5d, 0x49, 0xac, 0xcd, 0x3f, 0x8e, 0x81, 0x13, 0xeb, 0x0c, 0x23, 0x81, 0x3f, 0x48, 0x0d, 0x26,
	0x7e, 0x16, 0x63, 0x2e, 0xe0, 0x5d, 0x30, 0xb7, 0xe9, 0x13, 0x57, 0xd7, 0x1a, 0x5a, 0xab, 0xb4,
	0x76, 0x6d, 0xb4, 0x53, 0x5f, 0x05, 0x2b, 0x03, 0x1f, 0x6f, 0x45, 0x94, 0x09, 0xec, 0x0e, 0x09,
	0x25, 0x13, 0x33, 0x1e, 0x52, 0x2a, 0xfa, 0x5c, 0xe0, 0x68, 0x18, 0x31, 0x2c, 0x0d, 0x43, 0x26,
	0xc2, 0xc8, 0x54, 0x31, 0xe0, 0x03, 0xb0, 0x10, 0x31, 0xfa, 0x14, 0x3b, 0x72, 0xbf, 0x2c, 0xb1,
	0x1d, 0x61, 0x7d, 0x56, 0x85, 0x3d, 0x3f, 0xda, 0xa9, 0x9f, 0x05, 0x75, 0xda, 0xeb, 0x71, 0x2c,
	0x2c, 0x27, 0xb6, 0x71, 0x88, 0xa2, 0xa1, 0x13, 0xdb, 0xd4, 0x77, 0x43, 0x14, 0x59, 0x57, 0xba,
	0x56, 0xf7, 0xfa, 0x8a, 0x59, 0x1d, 0xb3, 0x1f, 0x6e, 0x47, 0x18, 0xae, 0x83, 0x0a, 0x17, 0x98,
	0x61, 0x6a, 0xf5, 0x28, 0x0b, 0x91, 0xd0, 0x73, 0x2a, 0xda, 0xf2, 0x68, 0xa7, 0xbe, 0x04, 0xf4,
	0x90, 0x12, 0x3a, 0x14, 0xf6, 0x30, 0x60, 0x43, 0x39, 0xec, 0x5e, 0x5f, 0x19, 0x0a, 0x5b, 0x86,
	0x99, 0x4f, 0x48, 0x37, 0x15, 0x07, 0x5e, 0x06, 0x30, 0x5d, 0xd0, 0xea, 0x21, 0x07, 0x5b, 0x94,
	0xb9, 0x98, 0xe9, 0x73, 0x32, 0x92, 0x59, 0x4b, 0x2d, 0x37, 0x91, 0x83, 0xdf, 0x97, 0x38, 0x5c,
	0x06, 0x60, 0xfc, 0x8d, 0xfa, 0xb1, 0x86, 0xd6, 0x2a, 0x9a, 0x13, 0x08, 0xbc, 0x03, 0x8a, 0x03,
	0xc4, 0x7c, 0x44, 0x04, 0xd7, 0xf3, 0x8d, 0x5c, 0xab, 0xbc, 0xda, 0x36, 0x5e, 0xa6, 0x34, 0x23,
	0xdb, 0xef, 0x47, 0x09, 0xcb, 0xdc, 0xa5, 0xc3, 0xbb, 0xa0, 0x98, 0x9d, 0xa1, 0x5e, 0x68, 0x68,
	0xad, 0xf2, 0xea, 0x85, 0x97, 0x87, 0xba, 0x9f, 0x7a, 0xaf, 0xe5, 0x47, 0x3b, 0xf5, 0xd9, 0x86,
	0x66, 0xee, 0xf2, 0xe1, 0x49, 0x50, 0xf0, 0xb9, 0x25, 0xd9, 0x7a, 0x51, 0xe5, 0x9c, 0xf7, 0xf9,
	0x3d, 0x7f, 0x80, 0xe1, 0xff, 0x00, 0xb0, 0xa9, 0x10, 0x34, 0xb4, 0x1c, 0x14, 0xe9, 0x55, 0x65,
	0x2b, 0x25, 0xc8, 0x3a, 0x8a, 0xa4, 0x39, 0x8c, 0xac, 0x01, 0x66, 0xdc, 0xa7, 0x44, 0x5f, 0x68,
	0x68, 0xad, 0x8a, 0x59, 0x0a, 0xa3, 0x47, 0x09, 0x00, 0xcf, 0x83, 0x2a, 0x0f, 0x11, 0x13, 0x16,
	0x47, 0x61, 0x14, 0xf8, 0xc4, 0xd3, 0x6b, 0x2a, 0x42, 0x45, 0xa1, 0x1b, 0x29, 0x08, 0xcf, 0x82,
	0xf9, 0xe4, 0x2c, 0xad, 0x2d, 0xdf, 0x15, 0x7d, 0xfd, 0xb8, 0x8a, 0x53, 0x4e, 0xb0, 0xc7, 0x12,
	0x82, 0xe7, 0x40, 0x25, 0x75, 0xe9, 0x63, 0xdf, 0xeb, 0x0b, 0x1d, 0x2a, 0x9f, 0x94, 0x77, 0x5b,
	0x61, 0xb0, 0x05, 0x6a, 0xa9, 0x93, 0xb0, 0xad, 0x00, 0x13, 0x4f, 0xf4, 0xf5, 0xff, 0x28, 0xbf,
	0x6a, 0x82, 0x3f, 0xb4, 0xef, 0x29, 0x14, 0xd6, 0x40, 0xce, 0xa3, 0x91, 0xfe, 0x5f, 0x65, 0x94,
	0x43, 0xf9, 0x25, 0x3d, 0x86, 0x42, 0x6c, 0x31, 0x24, 0xb0, 0x7e, 0xa2, 0xa1, 0xb5, 0x34, 0xb3,
	0xa4, 0x10, 0x13, 0x09, 0xdc, 0xfc, 0xfd, 0x18, 0xa8, 0x8d, 0xa5, 0xcf, 0x23, 0x4a, 0x38, 0x86,
	0x70, 0x52, 0xfb, 0xa9, 0x86, 0x2f, 0x1e, 0xa0, 0xe1, 0x17, 0xc4, 0x79, 0x6e, 0xaa, 0x38, 0xff,
	0x29, 0xe2, 0x5b, 0x7b, 0x5d, 0xf1, 0x4d, 0x88, 0x6e, 0x11, 0xe4, 0xed, 0xd8, 0xd9, 0xc4, 0x42,
	0x69, 0xae, 0x64, 0xa6, 0x33, 0x58, 0x07, 0x65, 0x6a, 0xcb, 0xad, 0xb2, 0x08, 0x0a, 0xb1, 0x5e,
	0x52, 0x46, 0x90, 0x40, 0x0f, 0x50, 0x88, 0xe5, 0xe9, 0xc5, 0x2c, 0xd0, 0x81, 0x32, 0xc8, 0xe1,
	0xa4, 0x7e, 0xcb, 0x7b, 0xf4, 0x7b, 0x0a, 0x14, 0x1d, 0x97, 0x58, 0x7d, 0xca, 0x85, 0x3e, 0xaf,
	0xfc, 0x0b, 0x8e, 0x4b, 0x6e, 0x53, 0x2e, 0x24, 0x47, 0x9a, 0x64, 0xa4, 0x4a, 0xb2, 0xbe, 0xe3,
	0x92, 0x8f, 0x58, 0xf0, 0xaf, 0xe6, 0x53, 0xcd, 0x5f, 0x05, 0x0b, 0xfb, 0x6f, 0xfb, 0xb3, 0x60,
	0xde, 0x66, 0x14, 0xb9, 0x0e, 0xe2, 0xc2, 0xf2, 0x33, 0xe5, 0x97, 0x77, 0xb1, 0x3b, 0x6e, 0xf3,
	0x3b, 0x6d, 0x5c, 0x29, 0xf7, 0x11, 0xf1, 0x7b, 0x92, 0x77, 0x11, 0x2c, 0x84, 0x48, 0x2a, 0xdb,
	0xca, 0x1e, 0x96, 0x94, 0x5a, 0x4d, 0xe0, 0x8c, 0x00, 0x37, 0x40, 0xe9, 0x59, 0x8c, 0x02, 0x5f,
	0xf8, 0x98, 0xeb, 0xb3, 0x4a, 0xa3, 0x6f, 0x1e, 0x4d, 0xa3, 0xd9, 0x5a, 0x1f, 0x2a, 0xfa, 0xb6,
	0x39, 0x8e, 0xb3, 0xef, 0x40, 0x73, 0xfb, 0x0e, 0xb4, 0xf9, 0xfd, 0x1c, 0x38, 0x79, 0x40, 0x14,
	0xa8, 0x83, 0x82, 0xed, 0x0b, 0xb5, 0x3f, 0x9a, 0xda, 0xb8, 0x6c, 0x2a, 0x4f, 0x87, 0xc4, 0xa1,
	0x95, 0x3d, 0x6e, 0x5c, 0x95, 0x79, 0xc5, 0x9c, 0x27, 0x71, 0xf8, 0x28, 0xc3, 0x0e, 0xa8, 0xdf,
	0xdc, 0x01, 0xf5, 0x3b, 0xe5, 0xee, 0x98, 0x9b, 0x7a, 0x77, 0x1c, 0x56, 0xe8, 0xa7, 0x40, 0x31,
	0x7d, 0x2b, 0x9f, 0xeb, 0xf9, 0x86, 0xd6, 0x9a, 0x35, 0x0b, 0xc9, 0xfc, 0x89, 0x2c, 0xae, 0xf4,
	0xda, 0x51, 0xf1, 0x0b, 0x49, 0x71, 0x25, 0x90, 0x8a, 0xad, 0x83, 0x42, 0x84, 0x5c, 0x57, 0x0a,
	0xb7, 0x98, 0x50, 0xd3, 0xa9, 0xa4, 0xe2, 0x8f, 0x23, 0x44, 0x5c, 0xcb, 0xa1, 0xb8, 0xa7, 0xea,
	0x72, 0xd6, 0x04, 0x09, 0xb4, 0x4e, 0x71, 0x0f, 0x5e, 0x02, 0x35, 0xfc, 0x2c, 0xf6, 0x11, 0xf1,
	0xe2, 0x00, 0x31, 0xf5, 0x4e, 0xab, 0x22, 0x2d, 0x9a, 0x0b, 0x13, 0xf8, 0x7a, 0x6c, 0xe3, 0x29,
	0x55, 0x52, 0x3e, 0x4a, 0x95, 0xcc, 0x1f, 0xa1, 0x4a, 0x2a, 0x47, 0xac, 0x92, 0xea, 0xd4, 0x2a,
	0x39, 0x0f, 0xaa, 0x7d, 0xca, 0xfc, 0xe7, 0x94, 0x08, 0x14, 0x58, 0x3d, 0x3a, 0x48, 0x2b, 0xbc,
	0x32, 0x46, 0x6f, 0xd2, 0x41, 0x73, 0xa4, 0x81, 0xe3, 0xef, 0xb9, 0xee, 0x06, 0xf6, 0x42, 0x4c,
	0x5e, 0xa1, 0x3c, 0xe0, 0x05, 0x00, 0xd2, 0x4b, 0x54, 0x3a, 0x24, 0xed, 0x4d, 0x61, 0xb4, 0x53,
	0xcf, 0x01, 0xcd, 0x30, 0x4b, 0xa9, 0xe9, 0x8e, 0x0b, 0x75, 0x90, 0x23, 0x71, 0xa8, 0xa4, 0x32,
	0x97, 0x3c, 0xd8, 0xb5, 0x19, 0x53, 0x42, 0xf0, 0x34, 0x98, 0x53, 0xf7, 0xe2, 0xdc, 0x5e, 0xae,
	0x02, 0xe1, 0x2a, 0x28, 0xba, 0x31, 0x53, 0x0d, 0xa7, 0xd2, 0x85, 0xb6, 0xb6, 0x38, 0xda, 0xa9,
	0xc3, 0xee, 0x4c, 0xfa, 0xf7, 0x56, 0xf2, 0xef, 0xc2, 0xbb, 0xe6, 0xae, 0x5f, 0x76, 0x79, 0x22,
	0x2e, 0x94, 0x58, 0x92, 0xcb, 0x13, 0x71, 0xb1, 0xfa, 0x43, 0x7e, 0x7c, 0x03, 0x6c, 0x24, 0xdd,
	0x31, 0x7c, 0x08, 0xf2, 0xb7, 0x55, 0x57, 0x09, 0x17, 0x8d, 0xa4, 0xcf, 0x35, 0xb2, 0x06, 0xd6,
	0xb8, 0x21, 0x9b, 0xe0, 0xa5, 0xc6, 0xfe, 0x7a, 0x65, 0x91, 0x63, 0x24, 0x9c, 0x0d, 0x81, 0x44,
	0xcc, 0x9b, 0xb5, 0xcf, 0x7e, 0xfe, 0xed, 0xeb, 0x59, 0x00, 0x8b, 0x69, 0x83, 0xfa, 0x1c, 0x7e,
	0xa9, 0x81, 0x7c, 0xd2, 0x5f, 0xc2, 0x2b, 0x2f, 0x2f, 0xf7, 0xa9, 0x5d, 0xe8, 0x92, 0x71, 0xb4,
	0x3b, 0x22, 0x7b, 0xb9, 0x9b, 0x67, 0x54, 0x06, 0x8b, 0xcd, 0xe3, 0xaa, 0x49, 0x9f, 0xe8, 0x77,
	0xf9, 0xdb, 0xda, 0x1b, 0xf0, 0x2b, 0x0d, 0xe4, 0x6e, 0x61, 0x01, 0xdb, 0x47, 0x8d, 0xfa, 0x7a,
	0x49, 0xb4, 0x54, 0x12, 0x4d, 0xd8, 0x78, 0x21, 0x89, 0xce, 0x27, 0x93, 0x32, 0xfa, 0x14, 0x7e,
	0x2e, 0xb7, 0x07, 0x11, 0x07, 0x07, 0xaf, 0x9a, 0xd3, 0x01, 0x87, 0xd4, 0x5c, 0x55, 0x6b, 0x5f,
	0x6e, 0x5e, 0x3c, 0x6c, 0xed, 0x8e, 0xa3, 0xd6, 0x95, 0xdb, 0xf2, 0x85, 0x06, 0x8a, 0xeb, 0x34,
	0x8c, 0x02, 0x2c, 0xf0, 0x5f, 0x95, 0xc7, 0x55, 0x95, 0x87, 0xd1, 0xbc, 0x74, 0x78, 0x1e, 0xe9,
	0xca, 0x32, 0x93, 0x6f, 0x35, 0x50, 0xbe, 0x85, 0xc7, 0xcf, 0xcb, 0xdf, 0x73, 0x50, 0x59, 0xf8,
	0xe6, 0x35, 0x95, 0xe4, 0x0a, 0x34, 0x0e, 0x4d, 0x32, 0x4c, 0x29, 0xc6, 0x53, 0x4e, 0xc9, 0xda,
	0xe3, 0x1f, 0x47, 0xcb, 0x33, 0x3f, 0x8d, 0x96, 0x67, 0x7e, 0x19, 0x2d, 0xcf, 0x7c, 0xf3, 0xeb,
	0xf2, 0xcc, 0x93, 0x1b, 0x13, 0xbf, 0xe6, 0x18, 0x56, 0x4f, 0x4c, 0x3b, 0x40, 0x76, 0x9b, 0x60,
	0xb1, 0x45, 0xd9, 0x26, 0xef, 0x8c, 0x13, 0x6b, 0xcb, 0xb5, 0x3c, 0x4c, 0x3c, 0xda, 0xd9, 0xf3,
	0xd3, 0xec, 0x9d, 0x41, 0xd7, 0xce, 0xab, 0x5d, 0xbc, 0xf2, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x90, 0x58, 0x63, 0xcb, 0x0e, 0x00, 0x00,
}
